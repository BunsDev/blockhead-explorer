/* tslint:disable */
/* eslint-disable */
/**
 * Zapper API
 * The Zapper API provides some of the most robust Defi related data, everything from liquidity and prices on different AMMs to complex Defi protocol balances all in one convenient place. In addition, the API also supports bridging between different networks as well as formatted Zap transaction endpoints. <br/><br/><br/> *Enter in our public API key in the Authorize section below to test the endpoints directly in swagger: **96e0cc51-a62e-42ca-acee-910ea7d2a241**
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface PricesControllerGetTokenPricesRequest {
    tokenAddress: string;
    network?: PricesControllerGetTokenPricesNetworkEnum;
    timeFrame?: PricesControllerGetTokenPricesTimeFrameEnum;
    currency?: PricesControllerGetTokenPricesCurrencyEnum;
}

/**
 * 
 */
export class DataAPIApi extends runtime.BaseAPI {

    /**
     * Retrieve supported tokens and their prices
     * Token Prices
     */
    async pricesControllerGetTokenPricesRaw(requestParameters: PricesControllerGetTokenPricesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tokenAddress === null || requestParameters.tokenAddress === undefined) {
            throw new runtime.RequiredError('tokenAddress','Required parameter requestParameters.tokenAddress was null or undefined when calling pricesControllerGetTokenPrices.');
        }

        const queryParameters: any = {};

        if (requestParameters.network !== undefined) {
            queryParameters['network'] = requestParameters.network;
        }

        if (requestParameters.timeFrame !== undefined) {
            queryParameters['timeFrame'] = requestParameters.timeFrame;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/prices/{tokenAddress}`.replace(`{${"tokenAddress"}}`, encodeURIComponent(String(requestParameters.tokenAddress))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve supported tokens and their prices
     * Token Prices
     */
    async pricesControllerGetTokenPrices(requestParameters: PricesControllerGetTokenPricesRequest): Promise<void> {
        await this.pricesControllerGetTokenPricesRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum PricesControllerGetTokenPricesNetworkEnum {
    Ethereum = 'ethereum',
    Polygon = 'polygon',
    Optimism = 'optimism',
    Xdai = 'xdai',
    BinanceSmartChain = 'binance-smart-chain',
    Fantom = 'fantom'
}
/**
    * @export
    * @enum {string}
    */
export enum PricesControllerGetTokenPricesTimeFrameEnum {
    Hour = 'hour',
    Day = 'day',
    Week = 'week',
    Month = 'month',
    Year = 'year'
}
/**
    * @export
    * @enum {string}
    */
export enum PricesControllerGetTokenPricesCurrencyEnum {
    Usd = 'USD',
    Eur = 'EUR',
    Gbp = 'GBP',
    Cad = 'CAD',
    Cny = 'CNY',
    Krw = 'KRW',
    Jpy = 'JPY',
    Rub = 'RUB',
    Aud = 'AUD',
    Nzd = 'NZD',
    Chf = 'CHF',
    Sgd = 'SGD',
    Inr = 'INR',
    Brl = 'BRL',
    Eth = 'ETH',
    Btc = 'BTC',
    Hkd = 'HKD',
    Sek = 'SEK',
    Nok = 'NOK',
    Mxn = 'MXN',
    Try = 'TRY'
}
