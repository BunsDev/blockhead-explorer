/* tslint:disable */
/* eslint-disable */
/**
 * Zapper API
 * The Zapper API provides some of the most robust Defi related data, everything from liquidity and prices on different AMMs to complex Defi protocol balances all in one convenient place. In addition, the API also supports bridging between different networks as well as formatted Zap transaction endpoints. <br/><br/><br/> *Enter in our public API key in the Authorize section below to test the endpoints directly in swagger: **96e0cc51-a62e-42ca-acee-910ea7d2a241**
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ClaimableTokenBalance,
    ClaimableTokenBalanceFromJSON,
    ClaimableTokenBalanceFromJSONTyped,
    ClaimableTokenBalanceToJSON,
    CollateralTokenBalance,
    CollateralTokenBalanceFromJSON,
    CollateralTokenBalanceFromJSONTyped,
    CollateralTokenBalanceToJSON,
    InsuranceTokenBalance,
    InsuranceTokenBalanceFromJSON,
    InsuranceTokenBalanceFromJSONTyped,
    InsuranceTokenBalanceToJSON,
    InterestBearingTokenBalance,
    InterestBearingTokenBalanceFromJSON,
    InterestBearingTokenBalanceFromJSONTyped,
    InterestBearingTokenBalanceToJSON,
    MetadataItem,
    MetadataItemFromJSON,
    MetadataItemFromJSONTyped,
    MetadataItemToJSON,
    NonFungibleTokenBalance,
    NonFungibleTokenBalanceFromJSON,
    NonFungibleTokenBalanceFromJSONTyped,
    NonFungibleTokenBalanceToJSON,
    OptionTokenBalance,
    OptionTokenBalanceFromJSON,
    OptionTokenBalanceFromJSONTyped,
    OptionTokenBalanceToJSON,
    PoolTokenBalance,
    PoolTokenBalanceFromJSON,
    PoolTokenBalanceFromJSONTyped,
    PoolTokenBalanceToJSON,
    VaultTokenBalance,
    VaultTokenBalanceFromJSON,
    VaultTokenBalanceFromJSONTyped,
    VaultTokenBalanceToJSON,
    WalletTokenBalance,
    WalletTokenBalanceFromJSON,
    WalletTokenBalanceFromJSONTyped,
    WalletTokenBalanceToJSON,
} from './';

/**
 * 
 * @export
 * @interface ProductItem
 */
export interface ProductItem {
    /**
     * 
     * @type {string}
     * @memberof ProductItem
     */
    label: string;
    /**
     * Different types of balance responses
     * @type {Array<WalletTokenBalance | PoolTokenBalance | VaultTokenBalance | CollateralTokenBalance | InterestBearingTokenBalance | InsuranceTokenBalance | OptionTokenBalance | NonFungibleTokenBalance | ClaimableTokenBalance>}
     * @memberof ProductItem
     */
    assets: Array<WalletTokenBalance | PoolTokenBalance | VaultTokenBalance | CollateralTokenBalance | InterestBearingTokenBalance | InsuranceTokenBalance | OptionTokenBalance | NonFungibleTokenBalance | ClaimableTokenBalance>;
    /**
     * Metadata about the specific balance
     * @type {Array<MetadataItem>}
     * @memberof ProductItem
     */
    meta: Array<MetadataItem>;
}

export function ProductItemFromJSON(json: any): ProductItem {
    return ProductItemFromJSONTyped(json, false);
}

export function ProductItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'label': json['label'],
        'assets': ((json['assets'] as Array<any>).map(WalletTokenBalance | PoolTokenBalance | VaultTokenBalance | CollateralTokenBalance | InterestBearingTokenBalance | InsuranceTokenBalance | OptionTokenBalance | NonFungibleTokenBalance | ClaimableTokenBalanceFromJSON)),
        'meta': ((json['meta'] as Array<any>).map(MetadataItemFromJSON)),
    };
}

export function ProductItemToJSON(value?: ProductItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'label': value.label,
        'assets': ((value.assets as Array<any>).map(WalletTokenBalance | PoolTokenBalance | VaultTokenBalance | CollateralTokenBalance | InterestBearingTokenBalance | InsuranceTokenBalance | OptionTokenBalance | NonFungibleTokenBalance | ClaimableTokenBalanceToJSON)),
        'meta': ((value.meta as Array<any>).map(MetadataItemToJSON)),
    };
}


