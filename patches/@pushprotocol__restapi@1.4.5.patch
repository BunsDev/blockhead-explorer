diff --git a/package.json b/package.json
index 72195c2eb51a3a1c1692d0c5d405bd1e7a70323f..e023d3d62c7a133ce0a8bffd6118ed6a85242d58 100644
--- a/package.json
+++ b/package.json
@@ -6,7 +6,7 @@
     "registry": "https://registry.npmjs.org/"
   },
   "peerDependencies": {
-    "ethers": "^5.6.8"
+    "ethers": "^6.4.0"
   },
   "dependencies": {
     "@ambire/signature-validator": "^1.3.1",
diff --git a/src/lib/chat/helpers/signature.js b/src/lib/chat/helpers/signature.js
index d70a6b6bc50941b709724527670d797ccdb22afb..6025f4f545ba57857b43a9e4b4b75fabf9bb1475 100644
--- a/src/lib/chat/helpers/signature.js
+++ b/src/lib/chat/helpers/signature.js
@@ -4,7 +4,6 @@ exports.verifyProfileSignature = exports.getTypedData = exports.getTypeInformati
 const tslib_1 = require("tslib");
 const eth_sig_util_1 = require("@metamask/eth-sig-util");
 const ethers = require("ethers");
-const utils_1 = require("ethers/lib/utils");
 const signature_validator_1 = require("@ambire/signature-validator");
 /**
  *
@@ -130,7 +129,7 @@ const verifyProfileSignature = (verificationProof, signedData, address) => tslib
         // EIP191 sig validation
         try {
             // EOA Wallet
-            const recoveredAddress = ethers.utils.recoverAddress((0, utils_1.hashMessage)(signedData), signature);
+            const recoveredAddress = ethers.recoverAddress((0, ethers.hashMessage)(signedData), signature);
             if (recoveredAddress.toLowerCase() === address.toLowerCase()) {
                 return true;
             }
diff --git a/src/lib/helpers/address.js b/src/lib/helpers/address.js
index 8ea4300b6d36006659e5b03356c4f8f08ff70731..a98933d43f33bfd964526a8c5350fe719f7e4b32 100644
--- a/src/lib/helpers/address.js
+++ b/src/lib/helpers/address.js
@@ -11,19 +11,19 @@ function isValidETHAddress(address) {
     if (address.includes('eip155:')) {
         const splittedAddress = address.split(':');
         if (splittedAddress.length === 3) {
-            return ethers.utils.isAddress(splittedAddress[2]);
+            return ethers.isAddress(splittedAddress[2]);
         }
         if (splittedAddress.length === 2)
-            return ethers.utils.isAddress(splittedAddress[1]);
+            return ethers.isAddress(splittedAddress[1]);
     }
-    return ethers.utils.isAddress(address);
+    return ethers.isAddress(address);
 }
 exports.isValidETHAddress = isValidETHAddress;
 function isValidNFTCAIP10Address(realCAIP10) {
     const walletComponent = realCAIP10.split(':');
     if (isNaN(Number(walletComponent[1])))
         return false;
-    return (walletComponent.length === 3 && walletComponent[0] === 'eip155' && ethers.utils.isAddress(walletComponent[2]));
+    return (walletComponent.length === 3 && walletComponent[0] === 'eip155' && ethers.isAddress(walletComponent[2]));
 }
 exports.isValidNFTCAIP10Address = isValidNFTCAIP10Address;
 /**
@@ -40,7 +40,7 @@ const isValidCAIP10NFTAddress = (wallet) => {
             Number(walletComponent[4]) > 0 &&
             !isNaN(Number(walletComponent[2])) &&
             Number(walletComponent[2]) > 0 &&
-            ethers.utils.isAddress(walletComponent[3]) &&
+            ethers.isAddress(walletComponent[3]) &&
             walletComponent[1] === 'eip155');
     }
     catch (err) {