/* tslint:disable */
/* eslint-disable */
/**
 * Zapper API
 * The Zapper API provides some of the most robust Defi related data, everything from liquidity and prices on different AMMs to complex Defi protocol balances all in one convenient place. In addition, the API also supports bridging between different networks as well as formatted Zap transaction endpoints. <br/><br/><br/> *Enter in our public API key in the Authorize section below to test the endpoints directly in swagger: **96e0cc51-a62e-42ca-acee-910ea7d2a241**
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface FarmFetcherControllerGetEthereumFarmsRequest {
    farmStatsType: FarmFetcherControllerGetEthereumFarmsFarmStatsTypeEnum;
    network?: FarmFetcherControllerGetEthereumFarmsNetworkEnum;
}

export interface PoolControllerGetInsuranceStatsRequest {
    insuranceStatsType: PoolControllerGetInsuranceStatsInsuranceStatsTypeEnum;
    network: PoolControllerGetInsuranceStatsNetworkEnum;
}

export interface PoolControllerGetLendingPoolStatsRequest {
    lendingPoolStatsType: PoolControllerGetLendingPoolStatsLendingPoolStatsTypeEnum;
    network: PoolControllerGetLendingPoolStatsNetworkEnum;
}

export interface PoolControllerGetPoolStatsRequest {
    poolStatsType: PoolControllerGetPoolStatsPoolStatsTypeEnum;
    network: PoolControllerGetPoolStatsNetworkEnum;
}

export interface PoolControllerGetPoolStatsByAddressRequest {
    poolStatsType: PoolControllerGetPoolStatsByAddressPoolStatsTypeEnum;
    poolAddress: string;
    network: PoolControllerGetPoolStatsByAddressNetworkEnum;
}

export interface PoolControllerGetVaultStatsRequest {
    vaultStatsType: PoolControllerGetVaultStatsVaultStatsTypeEnum;
    network: PoolControllerGetVaultStatsNetworkEnum;
}

/**
 * 
 */
export class ProtocolStatsApi extends runtime.BaseAPI {

    /**
     * Retrieves farms for a given farm type on the Ethereum mainnet network
     * Farm Stats
     */
    async farmFetcherControllerGetEthereumFarmsRaw(requestParameters: FarmFetcherControllerGetEthereumFarmsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.farmStatsType === null || requestParameters.farmStatsType === undefined) {
            throw new runtime.RequiredError('farmStatsType','Required parameter requestParameters.farmStatsType was null or undefined when calling farmFetcherControllerGetEthereumFarms.');
        }

        const queryParameters: any = {};

        if (requestParameters.network !== undefined) {
            queryParameters['network'] = requestParameters.network;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/farms/{farmStatsType}`.replace(`{${"farmStatsType"}}`, encodeURIComponent(String(requestParameters.farmStatsType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieves farms for a given farm type on the Ethereum mainnet network
     * Farm Stats
     */
    async farmFetcherControllerGetEthereumFarms(requestParameters: FarmFetcherControllerGetEthereumFarmsRequest): Promise<void> {
        await this.farmFetcherControllerGetEthereumFarmsRaw(requestParameters);
    }

    /**
     * Retrieve insurance stats for a given protocol
     * Insurance Stats
     */
    async poolControllerGetInsuranceStatsRaw(requestParameters: PoolControllerGetInsuranceStatsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.insuranceStatsType === null || requestParameters.insuranceStatsType === undefined) {
            throw new runtime.RequiredError('insuranceStatsType','Required parameter requestParameters.insuranceStatsType was null or undefined when calling poolControllerGetInsuranceStats.');
        }

        if (requestParameters.network === null || requestParameters.network === undefined) {
            throw new runtime.RequiredError('network','Required parameter requestParameters.network was null or undefined when calling poolControllerGetInsuranceStats.');
        }

        const queryParameters: any = {};

        if (requestParameters.network !== undefined) {
            queryParameters['network'] = requestParameters.network;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/insurance-stats/{insuranceStatsType}`.replace(`{${"insuranceStatsType"}}`, encodeURIComponent(String(requestParameters.insuranceStatsType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve insurance stats for a given protocol
     * Insurance Stats
     */
    async poolControllerGetInsuranceStats(requestParameters: PoolControllerGetInsuranceStatsRequest): Promise<void> {
        await this.poolControllerGetInsuranceStatsRaw(requestParameters);
    }

    /**
     * Retrieve lending stats for a given protocol
     * Lending Stats
     */
    async poolControllerGetLendingPoolStatsRaw(requestParameters: PoolControllerGetLendingPoolStatsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lendingPoolStatsType === null || requestParameters.lendingPoolStatsType === undefined) {
            throw new runtime.RequiredError('lendingPoolStatsType','Required parameter requestParameters.lendingPoolStatsType was null or undefined when calling poolControllerGetLendingPoolStats.');
        }

        if (requestParameters.network === null || requestParameters.network === undefined) {
            throw new runtime.RequiredError('network','Required parameter requestParameters.network was null or undefined when calling poolControllerGetLendingPoolStats.');
        }

        const queryParameters: any = {};

        if (requestParameters.network !== undefined) {
            queryParameters['network'] = requestParameters.network;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/lending-stats/{lendingPoolStatsType}`.replace(`{${"lendingPoolStatsType"}}`, encodeURIComponent(String(requestParameters.lendingPoolStatsType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve lending stats for a given protocol
     * Lending Stats
     */
    async poolControllerGetLendingPoolStats(requestParameters: PoolControllerGetLendingPoolStatsRequest): Promise<void> {
        await this.poolControllerGetLendingPoolStatsRaw(requestParameters);
    }

    /**
     * Retrieve pool stats for a given protocol
     * Pool Stats
     */
    async poolControllerGetPoolStatsRaw(requestParameters: PoolControllerGetPoolStatsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.poolStatsType === null || requestParameters.poolStatsType === undefined) {
            throw new runtime.RequiredError('poolStatsType','Required parameter requestParameters.poolStatsType was null or undefined when calling poolControllerGetPoolStats.');
        }

        if (requestParameters.network === null || requestParameters.network === undefined) {
            throw new runtime.RequiredError('network','Required parameter requestParameters.network was null or undefined when calling poolControllerGetPoolStats.');
        }

        const queryParameters: any = {};

        if (requestParameters.network !== undefined) {
            queryParameters['network'] = requestParameters.network;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/pool-stats/{poolStatsType}`.replace(`{${"poolStatsType"}}`, encodeURIComponent(String(requestParameters.poolStatsType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve pool stats for a given protocol
     * Pool Stats
     */
    async poolControllerGetPoolStats(requestParameters: PoolControllerGetPoolStatsRequest): Promise<void> {
        await this.poolControllerGetPoolStatsRaw(requestParameters);
    }

    /**
     * Retrieve pool stats for a given protocol
     * Pool Stats
     */
    async poolControllerGetPoolStatsByAddressRaw(requestParameters: PoolControllerGetPoolStatsByAddressRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.poolStatsType === null || requestParameters.poolStatsType === undefined) {
            throw new runtime.RequiredError('poolStatsType','Required parameter requestParameters.poolStatsType was null or undefined when calling poolControllerGetPoolStatsByAddress.');
        }

        if (requestParameters.poolAddress === null || requestParameters.poolAddress === undefined) {
            throw new runtime.RequiredError('poolAddress','Required parameter requestParameters.poolAddress was null or undefined when calling poolControllerGetPoolStatsByAddress.');
        }

        if (requestParameters.network === null || requestParameters.network === undefined) {
            throw new runtime.RequiredError('network','Required parameter requestParameters.network was null or undefined when calling poolControllerGetPoolStatsByAddress.');
        }

        const queryParameters: any = {};

        if (requestParameters.network !== undefined) {
            queryParameters['network'] = requestParameters.network;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/pool-stats/{poolStatsType}/{poolAddress}`.replace(`{${"poolStatsType"}}`, encodeURIComponent(String(requestParameters.poolStatsType))).replace(`{${"poolAddress"}}`, encodeURIComponent(String(requestParameters.poolAddress))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve pool stats for a given protocol
     * Pool Stats
     */
    async poolControllerGetPoolStatsByAddress(requestParameters: PoolControllerGetPoolStatsByAddressRequest): Promise<void> {
        await this.poolControllerGetPoolStatsByAddressRaw(requestParameters);
    }

    /**
     * Retrieve vault stats for a given protocol
     * Vault Stats
     */
    async poolControllerGetVaultStatsRaw(requestParameters: PoolControllerGetVaultStatsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.vaultStatsType === null || requestParameters.vaultStatsType === undefined) {
            throw new runtime.RequiredError('vaultStatsType','Required parameter requestParameters.vaultStatsType was null or undefined when calling poolControllerGetVaultStats.');
        }

        if (requestParameters.network === null || requestParameters.network === undefined) {
            throw new runtime.RequiredError('network','Required parameter requestParameters.network was null or undefined when calling poolControllerGetVaultStats.');
        }

        const queryParameters: any = {};

        if (requestParameters.network !== undefined) {
            queryParameters['network'] = requestParameters.network;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/vault-stats/{vaultStatsType}`.replace(`{${"vaultStatsType"}}`, encodeURIComponent(String(requestParameters.vaultStatsType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve vault stats for a given protocol
     * Vault Stats
     */
    async poolControllerGetVaultStats(requestParameters: PoolControllerGetVaultStatsRequest): Promise<void> {
        await this.poolControllerGetVaultStatsRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum FarmFetcherControllerGetEthereumFarmsFarmStatsTypeEnum {
    Masterchef = 'masterchef',
    SingleStaking = 'single-staking',
    Geyser = 'geyser',
    Gauge = 'gauge'
}
/**
    * @export
    * @enum {string}
    */
export enum FarmFetcherControllerGetEthereumFarmsNetworkEnum {
    Ethereum = 'ethereum',
    Polygon = 'polygon',
    Optimism = 'optimism',
    Xdai = 'xdai',
    BinanceSmartChain = 'binance-smart-chain',
    Fantom = 'fantom'
}
/**
    * @export
    * @enum {string}
    */
export enum PoolControllerGetInsuranceStatsInsuranceStatsTypeEnum {
    Cover = 'cover'
}
/**
    * @export
    * @enum {string}
    */
export enum PoolControllerGetInsuranceStatsNetworkEnum {
    Ethereum = 'ethereum',
    Polygon = 'polygon',
    Optimism = 'optimism',
    Xdai = 'xdai',
    BinanceSmartChain = 'binance-smart-chain',
    Fantom = 'fantom'
}
/**
    * @export
    * @enum {string}
    */
export enum PoolControllerGetLendingPoolStatsLendingPoolStatsTypeEnum {
    Aave = 'aave',
    Compound = 'compound'
}
/**
    * @export
    * @enum {string}
    */
export enum PoolControllerGetLendingPoolStatsNetworkEnum {
    Ethereum = 'ethereum',
    Polygon = 'polygon',
    Optimism = 'optimism',
    Xdai = 'xdai',
    BinanceSmartChain = 'binance-smart-chain',
    Fantom = 'fantom'
}
/**
    * @export
    * @enum {string}
    */
export enum PoolControllerGetPoolStatsPoolStatsTypeEnum {
    Balancer = 'balancer',
    Bancor = 'bancor',
    Curve = 'curve',
    Dhedge = 'dhedge',
    Ellipsis = 'ellipsis',
    Loopring = 'loopring',
    _1inch = '1inch',
    Pancakeswap = 'pancakeswap',
    Quickswap = 'quickswap',
    Sfinance = 'sfinance',
    Snowswap = 'snowswap',
    Sushiswap = 'sushiswap',
    UniswapV2 = 'uniswap-v2',
    Linkswap = 'linkswap',
    Dodo = 'dodo',
    Saddle = 'saddle',
    Xsigma = 'xsigma'
}
/**
    * @export
    * @enum {string}
    */
export enum PoolControllerGetPoolStatsNetworkEnum {
    Ethereum = 'ethereum',
    Polygon = 'polygon',
    Optimism = 'optimism',
    Xdai = 'xdai',
    BinanceSmartChain = 'binance-smart-chain',
    Fantom = 'fantom'
}
/**
    * @export
    * @enum {string}
    */
export enum PoolControllerGetPoolStatsByAddressPoolStatsTypeEnum {
    Balancer = 'balancer',
    Bancor = 'bancor',
    Curve = 'curve',
    Dhedge = 'dhedge',
    Ellipsis = 'ellipsis',
    Loopring = 'loopring',
    _1inch = '1inch',
    Pancakeswap = 'pancakeswap',
    Quickswap = 'quickswap',
    Sfinance = 'sfinance',
    Snowswap = 'snowswap',
    Sushiswap = 'sushiswap',
    UniswapV2 = 'uniswap-v2',
    Linkswap = 'linkswap',
    Dodo = 'dodo',
    Saddle = 'saddle',
    Xsigma = 'xsigma'
}
/**
    * @export
    * @enum {string}
    */
export enum PoolControllerGetPoolStatsByAddressNetworkEnum {
    Ethereum = 'ethereum',
    Polygon = 'polygon',
    Optimism = 'optimism',
    Xdai = 'xdai',
    BinanceSmartChain = 'binance-smart-chain',
    Fantom = 'fantom'
}
/**
    * @export
    * @enum {string}
    */
export enum PoolControllerGetVaultStatsVaultStatsTypeEnum {
    Badger = 'badger',
    Harvest = 'harvest',
    Mushroom = 'mushroom',
    Pickle = 'pickle',
    Pooltogether = 'pooltogether',
    Yearn = 'yearn'
}
/**
    * @export
    * @enum {string}
    */
export enum PoolControllerGetVaultStatsNetworkEnum {
    Ethereum = 'ethereum',
    Polygon = 'polygon',
    Optimism = 'optimism',
    Xdai = 'xdai',
    BinanceSmartChain = 'binance-smart-chain',
    Fantom = 'fantom'
}
