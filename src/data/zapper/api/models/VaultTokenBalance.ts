/* tslint:disable */
/* eslint-disable */
/**
 * Zapper API
 * The Zapper API provides some of the most robust Defi related data, everything from liquidity and prices on different AMMs to complex Defi protocol balances all in one convenient place. In addition, the API also supports bridging between different networks as well as formatted Zap transaction endpoints. <br/><br/><br/> *Enter in our public API key in the Authorize section below to test the endpoints directly in swagger: **96e0cc51-a62e-42ca-acee-910ea7d2a241**
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type {
    BaseTokenBalance,
    PoolTokenBalance,
} from './';
import {
    BaseTokenBalanceFromJSON,
    BaseTokenBalanceFromJSONTyped,
    BaseTokenBalanceToJSON,
    PoolTokenBalanceFromJSON,
    PoolTokenBalanceFromJSONTyped,
    PoolTokenBalanceToJSON,
} from './';

/**
 * 
 * @export
 * @interface VaultTokenBalance
 */
export interface VaultTokenBalance {
    /**
     * Token contract address
     * @type {string}
     * @memberof VaultTokenBalance
     */
    address: string;
    /**
     * Token symbol
     * @type {string}
     * @memberof VaultTokenBalance
     */
    symbol: string;
    /**
     * Token decimals
     * @type {number}
     * @memberof VaultTokenBalance
     */
    decimals: number;
    /**
     * Token price in USD
     * @type {number}
     * @memberof VaultTokenBalance
     */
    price: number;
    /**
     * Token address
     * @type {string}
     * @memberof VaultTokenBalance
     */
    tokenAddress: string;
    /**
     * Token label
     * @type {string}
     * @memberof VaultTokenBalance
     */
    label?: string;
    /**
     * Image name
     * @type {string}
     * @memberof VaultTokenBalance
     */
    img?: string;
    /**
     * Reserve amount for certain token types
     * @type {number}
     * @memberof VaultTokenBalance
     */
    reserve?: number;
    /**
     * Human readable balance
     * @type {number}
     * @memberof VaultTokenBalance
     */
    balance: number;
    /**
     * Total value in USD
     * @type {number}
     * @memberof VaultTokenBalance
     */
    balanceUSD: number;
    /**
     * Raw balance read from the contract
     * @type {string}
     * @memberof VaultTokenBalance
     */
    balanceRaw?: string;
    /**
     * Name of protocol
     * @type {string}
     * @memberof VaultTokenBalance
     */
    protocol: string;
    /**
     * Display for the protocol
     * @type {string}
     * @memberof VaultTokenBalance
     */
    protocolDisplay: string;
    /**
     * Protocol symbol
     * @type {string}
     * @memberof VaultTokenBalance
     */
    protocolSymbol: string;
    /**
     * The balance type of the response
     * @type {string}
     * @memberof VaultTokenBalance
     */
    type: string;
    /**
     * Price per share of the vault token
     * @type {number}
     * @memberof VaultTokenBalance
     */
    pricePerShare?: number;
    /**
     * Can deposit on Zapper
     * @type {boolean}
     * @memberof VaultTokenBalance
     */
    canDeposit?: boolean;
    /**
     * Percent yield earned annually
     * @type {number}
     * @memberof VaultTokenBalance
     */
    apy?: number;
    /**
     * Different types of underlying tokens that can be held in the vault
     * @type {Array<BaseTokenBalance | PoolTokenBalance>}
     * @memberof VaultTokenBalance
     */
    tokens: Array<BaseTokenBalance | PoolTokenBalance>;
}

export function VaultTokenBalanceFromJSON(json: any): VaultTokenBalance {
    return VaultTokenBalanceFromJSONTyped(json, false);
}

export function VaultTokenBalanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): VaultTokenBalance {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'symbol': json['symbol'],
        'decimals': json['decimals'],
        'price': json['price'],
        'tokenAddress': json['tokenAddress'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'img': !exists(json, 'img') ? undefined : json['img'],
        'reserve': !exists(json, 'reserve') ? undefined : json['reserve'],
        'balance': json['balance'],
        'balanceUSD': json['balanceUSD'],
        'balanceRaw': !exists(json, 'balanceRaw') ? undefined : json['balanceRaw'],
        'protocol': json['protocol'],
        'protocolDisplay': json['protocolDisplay'],
        'protocolSymbol': json['protocolSymbol'],
        'type': json['type'],
        'pricePerShare': !exists(json, 'pricePerShare') ? undefined : json['pricePerShare'],
        'canDeposit': !exists(json, 'canDeposit') ? undefined : json['canDeposit'],
        'apy': !exists(json, 'apy') ? undefined : json['apy'],
        'tokens': ((json['tokens'] as Array<any>).map(BaseTokenBalance | PoolTokenBalanceFromJSON)),
    };
}

export function VaultTokenBalanceToJSON(value?: VaultTokenBalance | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'symbol': value.symbol,
        'decimals': value.decimals,
        'price': value.price,
        'tokenAddress': value.tokenAddress,
        'label': value.label,
        'img': value.img,
        'reserve': value.reserve,
        'balance': value.balance,
        'balanceUSD': value.balanceUSD,
        'balanceRaw': value.balanceRaw,
        'protocol': value.protocol,
        'protocolDisplay': value.protocolDisplay,
        'protocolSymbol': value.protocolSymbol,
        'type': value.type,
        'pricePerShare': value.pricePerShare,
        'canDeposit': value.canDeposit,
        'apy': value.apy,
        'tokens': ((value.tokens as Array<any>).map(BaseTokenBalance | PoolTokenBalanceToJSON)),
    };
}


