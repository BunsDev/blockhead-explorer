/* tslint:disable */
/* eslint-disable */
/**
 * Zapper API
 * The Zapper API provides some of the most robust Defi related data, everything from liquidity and prices on different AMMs to complex Defi protocol balances all in one convenient place. In addition, the API also supports bridging between different networks as well as formatted Zap transaction endpoints. <br/><br/><br/> *Enter in our public API key in the Authorize section below to test the endpoints directly in swagger: **96e0cc51-a62e-42ca-acee-910ea7d2a241**
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ClaimableTokenBalance
 */
export interface ClaimableTokenBalance {
    /**
     * Token contract address
     * @type {string}
     * @memberof ClaimableTokenBalance
     */
    address: string;
    /**
     * Token symbol
     * @type {string}
     * @memberof ClaimableTokenBalance
     */
    symbol: string;
    /**
     * Token decimals
     * @type {number}
     * @memberof ClaimableTokenBalance
     */
    decimals: number;
    /**
     * Token price in USD
     * @type {number}
     * @memberof ClaimableTokenBalance
     */
    price: number;
    /**
     * Token address
     * @type {string}
     * @memberof ClaimableTokenBalance
     */
    tokenAddress: string;
    /**
     * Token label
     * @type {string}
     * @memberof ClaimableTokenBalance
     */
    label?: string;
    /**
     * Image name
     * @type {string}
     * @memberof ClaimableTokenBalance
     */
    img?: string;
    /**
     * Reserve amount for certain token types
     * @type {number}
     * @memberof ClaimableTokenBalance
     */
    reserve?: number;
    /**
     * Human readable balance
     * @type {number}
     * @memberof ClaimableTokenBalance
     */
    balance: number;
    /**
     * Total value in USD
     * @type {number}
     * @memberof ClaimableTokenBalance
     */
    balanceUSD: number;
    /**
     * Raw balance read from the contract
     * @type {string}
     * @memberof ClaimableTokenBalance
     */
    balanceRaw?: string;
    /**
     * The balance type of the response
     * @type {string}
     * @memberof ClaimableTokenBalance
     */
    type: string;
}

export function ClaimableTokenBalanceFromJSON(json: any): ClaimableTokenBalance {
    return ClaimableTokenBalanceFromJSONTyped(json, false);
}

export function ClaimableTokenBalanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClaimableTokenBalance {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'symbol': json['symbol'],
        'decimals': json['decimals'],
        'price': json['price'],
        'tokenAddress': json['tokenAddress'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'img': !exists(json, 'img') ? undefined : json['img'],
        'reserve': !exists(json, 'reserve') ? undefined : json['reserve'],
        'balance': json['balance'],
        'balanceUSD': json['balanceUSD'],
        'balanceRaw': !exists(json, 'balanceRaw') ? undefined : json['balanceRaw'],
        'type': json['type'],
    };
}

export function ClaimableTokenBalanceToJSON(value?: ClaimableTokenBalance | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'symbol': value.symbol,
        'decimals': value.decimals,
        'price': value.price,
        'tokenAddress': value.tokenAddress,
        'label': value.label,
        'img': value.img,
        'reserve': value.reserve,
        'balance': value.balance,
        'balanceUSD': value.balanceUSD,
        'balanceRaw': value.balanceRaw,
        'type': value.type,
    };
}


