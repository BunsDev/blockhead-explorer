/* tslint:disable */
/* eslint-disable */
/**
 * Zapper API
 * The Zapper API provides some of the most robust Defi related data, everything from liquidity and prices on different AMMs to complex Defi protocol balances all in one convenient place. In addition, the API also supports bridging between different networks as well as formatted Zap transaction endpoints. <br/><br/><br/> *Enter in our public API key in the Authorize section below to test the endpoints directly in swagger: **96e0cc51-a62e-42ca-acee-910ea7d2a241**
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface TokenTransferControllerGetTokenTransferTransactionRequest {
    tokenAddress: string;
    senderAddress: string;
    receiverAddress: string;
    amount: string;
    gasPrice: string;
    network?: TokenTransferControllerGetTokenTransferTransactionNetworkEnum;
}

/**
 * 
 */
export class TokenTransferApi extends runtime.BaseAPI {

    /**
     * Returns the information required to execute a transaction that will send over tokens to another wallet
     * Transfer Token to Another Wallet
     */
    async tokenTransferControllerGetTokenTransferTransactionRaw(requestParameters: TokenTransferControllerGetTokenTransferTransactionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tokenAddress === null || requestParameters.tokenAddress === undefined) {
            throw new runtime.RequiredError('tokenAddress','Required parameter requestParameters.tokenAddress was null or undefined when calling tokenTransferControllerGetTokenTransferTransaction.');
        }

        if (requestParameters.senderAddress === null || requestParameters.senderAddress === undefined) {
            throw new runtime.RequiredError('senderAddress','Required parameter requestParameters.senderAddress was null or undefined when calling tokenTransferControllerGetTokenTransferTransaction.');
        }

        if (requestParameters.receiverAddress === null || requestParameters.receiverAddress === undefined) {
            throw new runtime.RequiredError('receiverAddress','Required parameter requestParameters.receiverAddress was null or undefined when calling tokenTransferControllerGetTokenTransferTransaction.');
        }

        if (requestParameters.amount === null || requestParameters.amount === undefined) {
            throw new runtime.RequiredError('amount','Required parameter requestParameters.amount was null or undefined when calling tokenTransferControllerGetTokenTransferTransaction.');
        }

        if (requestParameters.gasPrice === null || requestParameters.gasPrice === undefined) {
            throw new runtime.RequiredError('gasPrice','Required parameter requestParameters.gasPrice was null or undefined when calling tokenTransferControllerGetTokenTransferTransaction.');
        }

        const queryParameters: any = {};

        if (requestParameters.tokenAddress !== undefined) {
            queryParameters['tokenAddress'] = requestParameters.tokenAddress;
        }

        if (requestParameters.senderAddress !== undefined) {
            queryParameters['senderAddress'] = requestParameters.senderAddress;
        }

        if (requestParameters.receiverAddress !== undefined) {
            queryParameters['receiverAddress'] = requestParameters.receiverAddress;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.gasPrice !== undefined) {
            queryParameters['gasPrice'] = requestParameters.gasPrice;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['network'] = requestParameters.network;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/token-transfer/transaction`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the information required to execute a transaction that will send over tokens to another wallet
     * Transfer Token to Another Wallet
     */
    async tokenTransferControllerGetTokenTransferTransaction(requestParameters: TokenTransferControllerGetTokenTransferTransactionRequest): Promise<void> {
        await this.tokenTransferControllerGetTokenTransferTransactionRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum TokenTransferControllerGetTokenTransferTransactionNetworkEnum {
    Ethereum = 'ethereum',
    Polygon = 'polygon',
    Optimism = 'optimism',
    Xdai = 'xdai',
    BinanceSmartChain = 'binance-smart-chain',
    Fantom = 'fantom'
}
